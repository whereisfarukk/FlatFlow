// bill.js

const mongoose = require("mongoose");

const billSchema = new mongoose.Schema(
    {
        apartmentNumber: {
            type: String,
            required: [true, "Apartment number is required"],
            trim: true,
        },
        billType: {
            type: String,
            enum: {
                values: ["maintenance", "electricity", "water", "gas", "other"],
                message: "Bill type must be one of: maintenance, electricity, water, gas, other",
            },
            required: [true, "Bill type is required"],
        },
        month: {
            type: String,
            required: [true, "Month is required"],
            trim: true,
        },
        year: {
            type: Number,
            required: [true, "Year is required"],
            min: [1900, "Year must be at least 1900"],
            max: [2100, "Year must be valid"],
        },
        billNumber: {
            type: String,
            required: [true, "Bill number is required"],
            // unique: true,
            trim: true,
        },
        amount: {
            type: Number,
            required: [true, "Bill amount is required"],
            min: [0, "Amount cannot be negative"],
        },
        breakdown: {
            maintenanceFee: {
                type: Number,
                default: 0,
                min: [0, "Maintenance fee cannot be negative"],
            },
            electricityCharges: {
                type: Number,
                default: 0,
                min: [0, "Electricity charges cannot be negative"],
            },
            waterCharges: {
                type: Number,
                default: 0,
                min: [0, "Water charges cannot be negative"],
            },
            gasCharges: {
                type: Number,
                default: 0,
                min: [0, "Gas charges cannot be negative"],
            },
            parkingCharges: {
                type: Number,
                default: 0,
                min: [0, "Parking charges cannot be negative"],
            },
            otherCharges: [
                {
                    description: {
                        type: String,
                        // required: true,
                        trim: true,
                    },
                    amount: {
                        type: Number,
                        // required: true,
                        min: [0, "Charge amount cannot be negative"],
                    },
                },
            ],
            lateFee: {
                type: Number,
                default: 0,
                min: [0, "Late fee cannot be negative"],
            },
            discount: {
                type: Number,
                default: 0,
                min: [0, "Discount cannot be negative"],
            },
        },
        dueDate: {
            type: Date,
            required: [true, "Due date is required"],
        },
        generatedDate: {
            type: Date,
            required: [true, "Generated date is required"],
        },
        isPaid: {
            type: Boolean,
            default: false,
        },
        paidAmount: {
            type: Number,
            default: 0,
            min: [0, "Paid amount cannot be negative"],
        },
        paidDate: {
            type: Date,
        },
        paymentMethod: {
            type: String,
            enum: {
                values: ["cash", "cheque", "online", "upi"],
                message: "Payment method must be one of: cash, cheque, online, upi",
            },
        },
        paymentReference: {
            type: String,
            trim: true,
        },
        generatedBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: "User",
            required: [true, "Generated by user is required"],
        },
        notes: {
            type: String,
            trim: true,
        },
    },
    {
        timestamps: { createdAt: "createdAt", updatedAt: "updatedAt" },
    }
);

// Create indexes
billSchema.index({ apartmentNumber: 1 });
billSchema.index({ billNumber: 1 });
billSchema.index({ month: 1, year: 1 });
billSchema.index({ isPaid: 1 });
billSchema.index({ dueDate: 1 });

// Export the model
module.exports = mongoose.model("Bill", billSchema);
